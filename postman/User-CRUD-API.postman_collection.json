{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "Swagger Javascript Express Node MongoDB",
		"description": "A comprehensive Postman collection for the Swagger Javascript Express Node MongoDB, MongoDB integration, and Swagger documentation.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12345678"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.token) {",
									"        pm.environment.set('auth_token', response.data.token);",
									"        pm.environment.set('user_id', response.data.user._id);",
									"        console.log('Token saved to environment:', response.data.token);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Doe\",\n  \"userName\": \"johndoe\",\n  \"email\": \"john@example.com\",\n  \"phone\": \"9876543210\",\n  \"password\": \"password123\",\n  \"gender\": \"Male\",\n  \"dob\": \"10-01-1995\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						},
						"description": "Register a new user account. The response will include a JWT token that will be automatically saved to the environment for use in subsequent requests."
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const response = pm.response.json();",
									"    if (response.data && response.data.token) {",
									"        pm.environment.set('auth_token', response.data.token);",
									"        pm.environment.set('user_id', response.data.user.id);",
									"        console.log('Token saved to environment:', response.data.token);",
									"    }",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"john@example.com\",\n  \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						},
						"description": "Login with existing user credentials. The response will include a JWT token that will be automatically saved to the environment for use in subsequent requests."
					},
					"response": []
				},
				{
					"name": "User Logout",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						},
						"description": "Logout the current user and invalidate their session"
					},
					"response": []
				},
				{
					"name": "Get Current User Profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/me",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"me"
							]
						},
						"description": "Get the current authenticated user's profile information. Requires a valid JWT token."
					},
					"response": []
				}
			],
			"description": "Authentication endpoints for user registration, login, and profile management."
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Get All Users (Admin)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users"
							]
						},
						"description": "Get a list of all users. This endpoint requires admin privileges."
					},
					"response": []
				},
				{
					"name": "Get User by ID (Admin)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Get a specific user by their ID. This endpoint requires admin privileges."
					},
					"response": []
				},
				{
					"name": "Update User by ID (Admin)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Updated\",\n  \"userName\": \"johnupdated\",\n  \"email\": \"john.updated@example.com\",\n  \"phone\": \"9876543210\",\n  \"gender\": \"Male\",\n  \"dob\": \"10-01-1995\",\n  \"role\": \"admin\",\n  \"isActive\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Update a specific user by their ID. This endpoint requires admin privileges and allows updating all user fields including role and status."
					},
					"response": []
				},
				{
					"name": "Delete User by ID (Admin)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/{{user_id}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"{{user_id}}"
							]
						},
						"description": "Delete a specific user by their ID. This endpoint requires admin privileges. WARNING: This action cannot be undone."
					},
					"response": []
				},
				{
					"name": "Update Own Profile",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"John\",\n  \"lastName\": \"Updated Profile\",\n  \"userName\": \"johnprofile\",\n  \"email\": \"john.profile@example.com\",\n  \"phone\": \"9876543210\",\n  \"gender\": \"Male\",\n  \"dob\": \"10-01-1995\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"profile"
							]
						},
						"description": "Update the current authenticated user's profile. Users can only update their own name and email."
					},
					"response": []
				}
			],
			"description": "User management endpoints for CRUD operations. Admin endpoints require admin privileges."
		},
		{
			"name": "Test Scenarios",
			"item": [
				{
					"name": "Complete User Flow Test",
					"item": [
						{
							"name": "1. Register New User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 201) {",
											"    const response = pm.response.json();",
											"    pm.environment.set('test_user_id', response.data.user._id);",
											"    pm.environment.set('test_auth_token', response.data.token);",
											"    console.log('Test user registered:', response.data.user.email);",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"User\",\n  \"userName\": \"testuser\",\n  \"email\": \"test@example.com\",\n  \"phone\": \"9876543210\",\n  \"password\": \"testpassword123\",\n  \"gender\": \"Male\",\n  \"dob\": \"01-01-1990\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Login Test User",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"if (pm.response.code === 200) {",
											"    const response = pm.response.json();",
											"    pm.environment.set('test_auth_token', response.data.token);",
											"    console.log('Test user logged in successfully');",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"test@example.com\",\n  \"password\": \"testpassword123\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Get Test User Profile",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test_auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/auth/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Update Test User Profile",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test_auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"firstName\": \"Test\",\n  \"lastName\": \"User Updated\",\n  \"userName\": \"testuserupdated\",\n  \"email\": \"test.updated@example.com\",\n  \"phone\": \"9876543210\",\n  \"gender\": \"Male\",\n  \"dob\": \"01-01-1990\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/users/profile",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users",
										"profile"
									]
								}
							},
							"response": []
						}
					],
					"description": "A complete test flow that registers a new user, logs them in, gets their profile, and updates it."
				},
				{
					"name": "Error Handling Tests",
					"item": [
						{
							"name": "Invalid Login Credentials",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/auth/login",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Access Protected Route Without Token",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/auth/me",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"me"
									]
								}
							},
							"response": []
						},
						{
							"name": "Access Admin Route as Regular User",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{test_auth_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/users",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"users"
									]
								}
							},
							"response": []
						}
					],
					"description": "Test various error scenarios to ensure proper error handling."
				}
			],
			"description": "Pre-configured test scenarios to validate API functionality and error handling."
		},
		{
			"name": "Session Management",
			"item": [
				{
					"name": "Get User Sessions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/sessions",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"sessions"
							]
						},
						"description": "Get current user's active sessions"
					},
					"response": []
				},
				{
					"name": "Get All Sessions (Admin)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/sessions/all?page=1&limit=10",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"sessions",
								"all"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								},
								{
									"key": "limit",
									"value": "10"
								}
							]
						},
						"description": "Get all sessions with pagination (Admin only)"
					},
					"response": []
				},
				{
					"name": "Logout Specific Session",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"sessionId\": \"sess_1234567890_abc123def\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/users/sessions/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"sessions",
								"logout"
							]
						},
						"description": "Logout a specific session by session ID"
					},
					"response": []
				},
				{
					"name": "Logout All Sessions",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/sessions/logout-all",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"sessions",
								"logout-all"
							]
						},
						"description": "Logout all sessions for the current user"
					},
					"response": []
				},
				{
					"name": "Terminate Session (Admin)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/users/sessions/sess_1234567890_abc123def",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"users",
								"sessions",
								"sess_1234567890_abc123def"
							]
						},
						"description": "Terminate a specific session (Admin only)"
					},
					"response": []
				}
			],
			"description": "Session management endpoints for tracking and managing user login sessions."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global pre-request script",
					"console.log('Making request to:', pm.request.url.toString());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test script",
					"pm.test('Response time is less than 5000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"pm.test('Response has success property', function () {",
					"    const response = pm.response.json();",
					"    pm.expect(response).to.have.property('success');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:5050",
			"type": "string"
		}
	]
}
